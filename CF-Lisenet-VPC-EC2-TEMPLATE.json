{
    "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"Lisenet-VPC",
    "Parameters":{
        "CreateVPC":{
            "Description":"Whether the VPC should be created or deleted. You cannot delete the VPC if you have EC2 instances using it.",
            "Type":"String",
            "Default":"yes",
            "AllowedValues":[
                "yes",
                "no"
            ],
            "ConstraintDescription":"Value must be yes or no."
        },
        "AvailabilityZone1":{
            "Description":"Availability zone to use for VPC and EC2.",
            "Type":"AWS::EC2::AvailabilityZone::Name",
            "Default":"eu-west-2a",
            "AllowedValues" : [ "eu-west-2a", "eu-west-2b", "eu-west-2c"],
            "ConstraintDescription":"Must be a valid availability zone."
        },
        "VPCSubnetCIDR":{
            "Description":"VPC CIDR.",
            "Type":"String",
            "MinLength":"9",
            "MaxLength":"18",
            "Default":"172.19.0.0/23",
            "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription":"Must be a valid IP CIDR range of the form x.x.x.x/x that is not in use."
        },
        "VPCSubnetBlock1":{
            "Description":"VPC application subnet.",
            "Type":"String",
            "MinLength":"9",
            "MaxLength":"18",
            "Default":"172.19.0.0/24",
            "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription":"Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "VPCSubnetBlock2":{
            "Description":"VPC database subnet.",
            "Type":"String",
            "MinLength":"9",
            "MaxLength":"18",
            "Default":"172.19.1.0/24",
            "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription":"Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "ExternalSafeIP1":{
            "Description":"IP to allow external SSH connections from (change it as required).",
            "Type":"String",
            "MinLength":"9",
            "MaxLength":"18",
            "Default":"192.168.1.2/32",
            "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription":"Must be a valid IP address of the form x.x.x.x/x."
        },
        "AmazonMachineImageId1Generic":{
            "Description":"CentOS7 AMI ID.",
            "Type":"AWS::EC2::Image::Id",
            "Default":"ami-09e5afc68eed60ef4"
        },
        "AmazonMachineImageId2Database":{
            "Description":"CentOS7 Database AMI ID.",
            "Type":"AWS::EC2::Image::Id",
            "Default":"ami-09e5afc68eed60ef4"
        },
        "CreateServer1":{
            "Description":"Whether the server should be created or deleted.",
            "Type":"String",
            "Default":"no",
            "AllowedValues":[
                "yes",
                "no"
            ],
            "ConstraintDescription":"Value must be yes or no."
        },
        "CreateServer2":{
            "Description":"Whether the server should be created or deleted.",
            "Type":"String",
            "Default":"no",
            "AllowedValues":[
                "yes",
                "no"
            ],
            "ConstraintDescription":"Value must be yes or no."
        },
        "InstanceType1":{
            "Description":"Instance type.",
            "Type":"String",
            "Default":"t3.micro",
            "AllowedValues" : [ "t3.micro", "t3.small", "t3.medium", "m5.large", "m5.xlarge"],
            "ConstraintDescription":"Must be a valid EC2 instance type."
        },
        "InstanceType2":{
            "Description":"Instance type.",
            "Type":"String",
            "Default":"t3.micro",
            "AllowedValues" : [ "t3.micro", "t3.small", "t3.medium", "m5.large", "m5.xlarge"],
            "ConstraintDescription":"Must be a valid EC2 instance type."
        },
        "EbsOptimizedApplyAll":{
            "Description":"Whether instance is optimised for Amazon Elastic Block Store I/O.",
            "Type":"String",
            "Default":"false",
            "AllowedValues":[
                "false",
                "true"
            ],
            "ConstraintDescription":"Must be a valid boolean."
        },
        "InstanceInitiatedShutdownBehaviorApplyAll":{
            "Description":"Whether instance should stop or terminate when you power it off.",
            "Type":"String",
            "Default":"stop",
            "AllowedValues":[
                "stop",
                "terminate"
            ],
            "ConstraintDescription":"Must be a shutdown behaviour."
        },
        "MonitoringApplyAll":{
            "Description":"Enable CloudWatch detailed monitoring for all servers.",
            "Type":"String",
            "Default":"false",
            "AllowedValues":[
                "false",
                "true"
            ],
            "ConstraintDescription":"Must be a valid boolean."
        },
        "InstanceTerminationProtectionApplyAll":{
            "Description":"Enable instance termination protection for all servers.",
            "Type":"String",
            "Default":"false",
            "AllowedValues":[
                "false",
                "true"
            ],
            "ConstraintDescription":"Must be a valid boolean."
        },
        "TenancyApplyAll":{
            "Description":"Tenancy for all servers. Default - shared",
            "Type":"String",
            "Default":"default",
            "AllowedValues":[
                "default",
                "dedicated",
                "host"
            ],
            "ConstraintDescription":"Must be a valid tenancy type."
        },
        "KeyNameApplyAll": {
            "Description":"Name of an existing EC2 key pair for SSH access to the EC2 instance.",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default":"lisenet-key"
        }
    },
    "Conditions":{
        "SetVPC":{
            "Fn::Equals":[
                {
                    "Ref":"CreateVPC"
                },
                "yes"
            ]
        },
        "SetServer1":{
            "Fn::Equals":[
                {
                    "Ref":"CreateServer1"
                },
                "yes"
            ]
        },
        "SetServer2":{
            "Fn::Equals":[
                {
                    "Ref":"CreateServer2"
                },
                "yes"
            ]
        }
    },
    "Metadata":{
        "AWS::CloudFormation::Interface":{
            "ParameterGroups":[
                {
                    "Label":{
                        "default":"General settings - change as required"
                    },
                    "Parameters":[
                        "AvailabilityZone1"
                    ]
                },
                {
                    "Label":{
                        "default":"VPC settings - change as required"
                    },
                    "Parameters":[
                        "CreateVPC",
                        "VPCSubnetCIDR",
                        "VPCSubnetBlock1",
                        "VPCSubnetBlock2"
                    ]
                },
                {
                    "Label":{
                        "default":"Generic Server Configuration (applies to all)"
                    },
                    "Parameters":[
                        "MonitoringApplyAll",
                        "TenancyApplyAll",
                        "EbsOptimizedApplyAll",
                        "InstanceInitiatedShutdownBehaviorApplyAll",
                        "InstanceTerminationProtectionApplyAll",
                        "KeyNameApplyAll"
                    ]
                },
                {
                    "Label":{
                        "default":"Application Server Configuration"
                    },
                    "Parameters":[
                        "CreateServer1",
                        "InstanceType1"
                    ]
                },
                {
                    "Label":{
                        "default":"Database Server Configuration"
                    },
                    "Parameters":[
                        "CreateServer2",
                        "InstanceType2"
                    ]
                },
                {
                    "Label":{
                        "default":"IP address for external SSH access"
                    },
                    "Parameters":[
                        "ExternalSafeIP1"
                    ]
                },
                {
                    "Label":{
                        "default":"AMI settings (change if required)"
                    },
                    "Parameters":[
                        "AmazonMachineImageId1Generic",
                        "AmazonMachineImageId2Database"
                    ]
                }
            ],
            "ParameterLabels":{
                "AmazonMachineImageId1Generic":{
                    "default":"AMI ID1"
                },
                "AmazonMachineImageId2Database":{
                    "default":"AMI ID2"
                }
            }
        }
    },
    "Resources":{
        "myVPC":{
            "Type":"AWS::EC2::VPC",
            "Condition":"SetVPC",
            "Properties":{
                "CidrBlock":{
                    "Ref":"VPCSubnetCIDR"
                },
                "EnableDnsSupport":"true",
                "EnableDnsHostnames":"true",
                "InstanceTenancy":"default",
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"CF-VPC-Lisenet"
                    }
                ]
            }
        },
        "mySubnet1":{
            "Type":"AWS::EC2::Subnet",
            "Condition":"SetVPC",
            "Properties":{
                "VpcId":{
                    "Ref":"myVPC"
                },
                "CidrBlock":{
                    "Ref":"VPCSubnetBlock1"
                },
                "AvailabilityZone":{
                    "Ref":"AvailabilityZone1"
                },
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"CF-Lisenet-Application-Subnet"
                    }
                ],
                "MapPublicIpOnLaunch":"true"
            }
        },
        "mySubnet2":{
            "Type":"AWS::EC2::Subnet",
            "Condition":"SetVPC",
            "Properties":{
                "VpcId":{
                    "Ref":"myVPC"
                },
                "CidrBlock":{
                    "Ref":"VPCSubnetBlock2"
                },
                "AvailabilityZone":{
                    "Ref":"AvailabilityZone1"
                },
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"CF-Lisenet-Database-Subnet"
                    }
                ],
                "MapPublicIpOnLaunch":"true"
            }
        },
        "myInternetGateway":{
            "Type":"AWS::EC2::InternetGateway",
            "Condition":"SetVPC",
            "Properties":{
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"CF-GATEWAY-Lisenet"
                    }
                ]
            }
        },
        "myAttachedGateway":{
            "Type":"AWS::EC2::VPCGatewayAttachment",
            "Condition":"SetVPC",
            "Properties":{
                "VpcId":{
                    "Ref":"myVPC"
                },
                "InternetGatewayId":{
                    "Ref":"myInternetGateway"
                }
            }
        },
        "myRouteTable1":{
            "Type":"AWS::EC2::RouteTable",
            "Condition":"SetVPC",
            "Properties":{
                "VpcId":{
                    "Ref":"myVPC"
                },
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"CF-ROUTE-EC2-Lisenet-TO-PUBLIC"
                    }
                ]
            }
        },
        "myRoute1":{
            "Type":"AWS::EC2::Route",
            "Condition":"SetVPC",
            "DependsOn":"myInternetGateway",
            "Properties":{
                "RouteTableId":{
                    "Ref":"myRouteTable1"
                },
                "DestinationCidrBlock":"0.0.0.0/0",
                "GatewayId":{
                    "Ref":"myInternetGateway"
                }
            }
        },
        "mySubnetRouteTableAssociation1":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Condition":"SetVPC",
            "Properties":{
                "SubnetId":{
                    "Ref":"mySubnet1"
                },
                "RouteTableId":{
                    "Ref":"myRouteTable1"
                }
            }
        },
        "mySubnetRouteTableAssociation2":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Condition":"SetVPC",
            "Properties":{
                "SubnetId":{
                    "Ref":"mySubnet2"
                },
                "RouteTableId":{
                    "Ref":"myRouteTable1"
                }
            }
        },
        "myVPCSecurityGroup1":{
            "Type":"AWS::EC2::SecurityGroup",
            "Condition":"SetVPC",
            "Properties":{
                "GroupDescription":"CF-Lisenet-Application",
                "VpcId":{
                    "Ref":"myVPC"
                },
                "SecurityGroupIngress":[
                    {
                        "Description":"CF: Allow ICMP from VPC",
                        "IpProtocol":"icmp",
                        "FromPort":"-1",
                        "ToPort":"-1",
                        "CidrIp":{
                            "Ref":"VPCSubnetCIDR"
                        }
                    }
                ],
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"CF-Lisenet-Application-Security-Group"
                    }
                ]
            }
        },
        "myVPCSecurityGroup2":{
            "Type":"AWS::EC2::SecurityGroup",
            "Condition":"SetVPC",
            "Properties":{
                "GroupDescription":"CF-Lisenet-Database",
                "VpcId":{
                    "Ref":"myVPC"
                },
                "SecurityGroupIngress":[
                    {
                        "Description":"CF: Allow ICMP from VPC",
                        "IpProtocol":"icmp",
                        "FromPort":"-1",
                        "ToPort":"-1",
                        "CidrIp":{
                            "Ref":"VPCSubnetCIDR"
                        }
                    }
                ],
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"CF-Lisenet-Database-Security-Group"
                    }
                ]
            }
        },
        "myNetworkAclEntry10ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"10",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"23",
                    "To":"23"
                }
            }
        },
        "myNetworkAclEntry10egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"10",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"23",
                    "To":"23"
                }
            }
        },
        "myNetworkAclEntry11ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"11",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"135",
                    "To":"135"
                }
            }
        },
        "myNetworkAclEntry11egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"11",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"135",
                    "To":"135"
                }
            }
        },
        "myNetworkAclEntry12ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"12",
                "Protocol":"17",
                "RuleAction":"deny",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"135",
                    "To":"135"
                }
            }
        },
        "myNetworkAclEntry12egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"12",
                "Protocol":"17",
                "RuleAction":"deny",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"135",
                    "To":"135"
                }
            }
        },
        "myNetworkAclEntry13ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"13",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"137",
                    "To":"139"
                }
            }
        },
        "myNetworkAclEntry13egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"13",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"137",
                    "To":"139"
                }
            }
        },
        "myNetworkAclEntry14ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"14",
                "Protocol":"17",
                "RuleAction":"deny",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"137",
                    "To":"139"
                }
            }
        },
        "myNetworkAclEntry14egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"14",
                "Protocol":"17",
                "RuleAction":"deny",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"137",
                    "To":"139"
                }
            }
        },
        "myNetworkAclEntry15ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"15",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"445",
                    "To":"445"
                }
            }
        },
        "myNetworkAclEntry15egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"15",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"445",
                    "To":"445"
                }
            }
        },
        "myNetworkAclEntry30ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"30",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"false",
                "CidrBlock":{
                    "Ref":"VPCSubnetCIDR"
                },
                "PortRange":{
                    "From":"22",
                    "To":"22"
                }
            }
        },
        "myNetworkAclEntry30egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"30",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"true",
                "CidrBlock":{
                    "Ref":"VPCSubnetCIDR"
                },
                "PortRange":{
                    "From":"22",
                    "To":"22"
                }
            }
        },
        "myNetworkAclEntry31ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"31",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"false",
                "CidrBlock":{
                    "Ref":"ExternalSafeIP1"
                },
                "PortRange":{
                    "From":"22",
                    "To":"22"
                }
            }
        },
        "myNetworkAclEntry31egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"31",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"true",
                "CidrBlock":{
                    "Ref":"ExternalSafeIP1"
                },
                "PortRange":{
                    "From":"22",
                    "To":"22"
                }
            }
        },
        "myNetworkAclEntry35ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"35",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"22",
                    "To":"22"
                }
            }
        },
        "myNetworkAclEntry35egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"35",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"22",
                    "To":"22"
                }
            }
        },
        "myNetworkAclEntry40ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"40",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"false",
                "CidrBlock":{
                    "Ref":"VPCSubnetCIDR"
                },
                "PortRange":{
                    "From":"3306",
                    "To":"3306"
                }
            }
        },
        "myNetworkAclEntry40egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"40",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"true",
                "CidrBlock":{
                    "Ref":"VPCSubnetCIDR"
                },
                "PortRange":{
                    "From":"3306",
                    "To":"3306"
                }
            }
        },
        "myNetworkAclEntry41ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"41",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"3306",
                    "To":"3306"
                }
            }
        },
        "myNetworkAclEntry41egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"41",
                "Protocol":"6",
                "RuleAction":"deny",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"3306",
                    "To":"3306"
                }
            }
        },
        "myNetworkAclEntry50ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"50",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"80",
                    "To":"80"
                }
            }
        },
        "myNetworkAclEntry50gress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"50",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"80",
                    "To":"80"
                }
            }
        },
        "myNetworkAclEntry51ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"51",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"443",
                    "To":"443"
                }
            }
        },
        "myNetworkAclEntry51egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"51",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"443",
                    "To":"443"
                }
            }
        },
        "myNetworkAclEntry52ingress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"52",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"8140",
                    "To":"8140"
                }
            }
        },
        "myNetworkAclEntry52egress":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Condition":"SetVPC",
            "Properties":{
                "NetworkAclId":{
                    "Fn::GetAtt":[
                        "myVPC",
                        "DefaultNetworkAcl"
                    ]
                },
                "RuleNumber":"52",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange":{
                    "From":"8140",
                    "To":"8140"
                }
            }
        },
        "myVPCSecurityGroup1Ingress1":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Allow ICMP from safe IP",
                "IpProtocol":"icmp",
                "FromPort":"-1",
                "ToPort":"-1",
                "CidrIp":{
                    "Ref":"ExternalSafeIP1"
                }
            }
        },
        "myVPCSecurityGroup1Ingress2":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Allow SSH from safe IP",
                "IpProtocol":"tcp",
                "FromPort":"22",
                "ToPort":"22",
                "CidrIp":{
                    "Ref":"ExternalSafeIP1"
                }
            }
        },
        "myVPCSecurityGroup1Ingress3":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Allow SSH from VPC",
                "IpProtocol":"tcp",
                "FromPort":"22",
                "ToPort":"22",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        },
        "myVPCSecurityGroup1Ingress4":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Allow ICMP from VPC",
                "IpProtocol":"icmp",
                "FromPort":"-1",
                "ToPort":"-1",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        },
        "myVPCSecurityGroup1Ingress5":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Allow HTTP from all",
                "IpProtocol":"tcp",
                "FromPort":"80",
                "ToPort":"80",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup1Ingress6":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Allow HTTPS from all",
                "IpProtocol":"tcp",
                "FromPort":"443",
                "ToPort":"443",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup1Egress1":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound to VPC (remove if not required)",
                "IpProtocol":"-1",
                "FromPort":"0",
                "ToPort":"65535",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        },
        "myVPCSecurityGroup1Egress2":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound ICMP",
                "IpProtocol":"icmp",
                "FromPort":"-1",
                "ToPort":"-1",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup1Egress3":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound DNS TCP",
                "IpProtocol":"tcp",
                "FromPort":"53",
                "ToPort":"53",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        },
        "myVPCSecurityGroup1Egress4":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound DNS UDP",
                "IpProtocol":"udp",
                "FromPort":"53",
                "ToPort":"53",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        },
        "myVPCSecurityGroup1Egress5":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound DHCP",
                "IpProtocol":"udp",
                "FromPort":"68",
                "ToPort":"68",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup1Egress6":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound NTP",
                "IpProtocol":"udp",
                "FromPort":"123",
                "ToPort":"123",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup1Egress7":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound SMTP",
                "IpProtocol":"tcp",
                "FromPort":"25",
                "ToPort":"25",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup1Egress8":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound SMTP over SSL",
                "IpProtocol":"tcp",
                "FromPort":"465",
                "ToPort":"465",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup1Egress9":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound SMTP over TLS",
                "IpProtocol":"tcp",
                "FromPort":"587",
                "ToPort":"587",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup1Egress10":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound HTTP",
                "IpProtocol":"tcp",
                "FromPort":"80",
                "ToPort":"80",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup1Egress11":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound HTTPS",
                "IpProtocol":"tcp",
                "FromPort":"443",
                "ToPort":"443",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup1Egress12":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup1"
                },
                "Description":"CF: Outbound Puppet",
                "IpProtocol":"tcp",
                "FromPort":"8140",
                "ToPort":"8140",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup2Ingress1":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Allow ICMP from safe IP",
                "IpProtocol":"icmp",
                "FromPort":"-1",
                "ToPort":"-1",
                "CidrIp":{
                    "Ref":"ExternalSafeIP1"
                }
            }
        },
        "myVPCSecurityGroup2Ingress2":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Allow SSH from safe IP",
                "IpProtocol":"tcp",
                "FromPort":"22",
                "ToPort":"22",
                "CidrIp":{
                    "Ref":"ExternalSafeIP1"
                }
            }
        },
        "myVPCSecurityGroup2Ingress3":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Allow SSH from VPC",
                "IpProtocol":"tcp",
                "FromPort":"22",
                "ToPort":"22",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        },
        "myVPCSecurityGroup2Ingress4":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Allow ICMP from VPC",
                "IpProtocol":"icmp",
                "FromPort":"-1",
                "ToPort":"-1",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        }, 
        "myVPCSecurityGroup2Ingress5":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Allow MySQL from VPC",
                "IpProtocol":"tcp",
                "FromPort":"3306",
                "ToPort":"3306",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        },
        "myVPCSecurityGroup2Ingress6":{
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Allow SSH from VPC",
                "IpProtocol":"tcp",
                "FromPort":"22",
                "ToPort":"22",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        }, 
        "myVPCSecurityGroup2Egress1":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Outbound to VPC (remove if not required)",
                "IpProtocol":"-1",
                "FromPort":"0",
                "ToPort":"65535",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        },
        "myVPCSecurityGroup2Egress2":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Outbound ICMP",
                "IpProtocol":"icmp",
                "FromPort":"-1",
                "ToPort":"-1",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup2Egress3":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Outbound DNS TCP",
                "IpProtocol":"tcp",
                "FromPort":"53",
                "ToPort":"53",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        },
        "myVPCSecurityGroup2Egress4":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Outbound DNS UDP",
                "IpProtocol":"udp",
                "FromPort":"53",
                "ToPort":"53",
                "CidrIp":{
                    "Ref":"VPCSubnetCIDR"
                }
            }
        },
        "myVPCSecurityGroup2Egress5":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Outbound DHCP",
                "IpProtocol":"udp",
                "FromPort":"68",
                "ToPort":"68",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup2Egress6":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Outbound NTP",
                "IpProtocol":"udp",
                "FromPort":"123",
                "ToPort":"123",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup2Egress7":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Outbound HTTP",
                "IpProtocol":"tcp",
                "FromPort":"80",
                "ToPort":"80",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup2Egress8":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Outbound HTTPS",
                "IpProtocol":"tcp",
                "FromPort":"443",
                "ToPort":"443",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "myVPCSecurityGroup2Egress9":{
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Condition":"SetVPC",
            "Properties":{
                "GroupId":{
                    "Ref":"myVPCSecurityGroup2"
                },
                "Description":"CF: Outbound Puppet",
                "IpProtocol":"tcp",
                "FromPort":"8140",
                "ToPort":"8140",
                "CidrIp":"0.0.0.0/0"
            }
        },
        "InstanceServer1":{
            "Type":"AWS::EC2::Instance",
            "Condition":"SetServer1",
            "Properties":{
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"CF-Lisenet-Application1"
                    }
                ],
                "SubnetId":{
                    "Ref":"mySubnet1"
                },
                "SecurityGroupIds":[
                    {
                        "Ref":"myVPCSecurityGroup1"
                    }
                ],
                "AvailabilityZone":{
                    "Ref":"AvailabilityZone1"
                },
                "ImageId":{
                    "Ref":"AmazonMachineImageId1Generic"
                },
                "InstanceType":{
                    "Ref":"InstanceType1"
                },
                "Monitoring":{
                    "Ref":"MonitoringApplyAll"
                },
                "Tenancy":{
                    "Ref":"TenancyApplyAll"
                },
                "EbsOptimized":{
                    "Ref":"EbsOptimizedApplyAll"
                },
                "InstanceInitiatedShutdownBehavior":{
                    "Ref":"InstanceInitiatedShutdownBehaviorApplyAll"
                },
                "DisableApiTermination":{
                    "Ref":"InstanceTerminationProtectionApplyAll"
                },
                "KeyName":{
                    "Ref":"KeyNameApplyAll"
                },             
                "UserData":{
                    "Fn::Base64":{
                        "Fn::Join":[
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum install -y puppet\n",
                                "echo [agent] > /etc/puppetlabs/puppet/puppet.conf\n",
                                "echo ca_server=puppet.lisenet.com >> /etc/puppetlabs/puppet/puppet.conf\n",
                                "echo server=puppet.lisenet.com >> /etc/puppetlabs/puppet/puppet.conf\n",
                                "echo environment=development >> /etc/puppetlabs/puppet/puppet.conf\n",
                                "echo runinterval=1800 >> /etc/puppetlabs/puppet/puppet.conf\n",
                                "echo certname=$(hostname -f) >> /etc/puppetlabs/puppet/puppet.conf\n",
                                "#systemctl enable puppet\n",
                                "#systemctl start puppet\n"
                            ]
                        ]
                    }
                }
            }
        },
        "InstanceServer1ElasticIP":{
            "Type":"AWS::EC2::EIP",
            "Condition":"SetServer1",
            "Properties":{
                "InstanceId":{
                    "Ref":"InstanceServer1"
                },
                "Domain":{
                    "Ref":"myVPC"
                }
            }
        },
        "InstanceServer2":{
            "Type":"AWS::EC2::Instance",
            "Condition":"SetServer2",
            "Properties":{
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"CF-Lisenet-Database1"
                    }
                ],
                "SubnetId":{
                    "Ref":"mySubnet2"
                },
                "SecurityGroupIds":[
                    {
                        "Ref":"myVPCSecurityGroup2"
                    }
                ],
                "AvailabilityZone":{
                    "Ref":"AvailabilityZone1"
                },
                "ImageId":{
                    "Ref":"AmazonMachineImageId1Generic"
                },
                "InstanceType":{
                    "Ref":"InstanceType2"
                },
                "Monitoring":{
                    "Ref":"MonitoringApplyAll"
                },
                "Tenancy":{
                    "Ref":"TenancyApplyAll"
                },
                "EbsOptimized":{
                    "Ref":"EbsOptimizedApplyAll"
                },
                "InstanceInitiatedShutdownBehavior":{
                    "Ref":"InstanceInitiatedShutdownBehaviorApplyAll"
                },
                "DisableApiTermination":{
                    "Ref":"InstanceTerminationProtectionApplyAll"
                },
                "KeyName":{
                    "Ref":"KeyNameApplyAll"
                },
                "UserData":{
                    "Fn::Base64":{
                        "Fn::Join":[
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum install -y puppet\n",
                                "echo [agent] > /etc/puppetlabs/puppet/puppet.conf\n",
                                "echo ca_server=puppet.lisenet.com >> /etc/puppetlabs/puppet/puppet.conf\n",
                                "echo server=puppet.lisenet.com >> /etc/puppetlabs/puppet/puppet.conf\n",
                                "echo environment=development >> /etc/puppetlabs/puppet/puppet.conf\n",
                                "echo runinterval=1800 >> /etc/puppetlabs/puppet/puppet.conf\n",
                                "echo certname=$(hostname -f) >> /etc/puppetlabs/puppet/puppet.conf\n",
                                "#systemctl enable puppet\n",
                                "#systemctl start puppet\n"
                            ]
                        ]
                    }
                }
            }
        }
    },
    "Outputs":{
        "VPCCIDR":{
            "Description":"The IP address range for the VPC.",
            "Condition":"SetVPC",
            "Value":{
                "Fn::GetAtt":[
                    "myVPC",
                    "CidrBlock"
                ]
            }
        },
        "Server1PrivateIPAddress":{
            "Description":"Private IP address of the application instance",
            "Condition":"SetServer1",
            "Value":{
                "Fn::GetAtt":[
                    "InstanceServer1",
                    "PrivateIp"
                ]
            }
        },
        "Server2PrivateIPAddress":{
            "Description":"Private IP address of the database instance",
            "Condition":"SetServer2",
            "Value":{
                "Fn::GetAtt":[
                    "InstanceServer2",
                    "PrivateIp"
                ]
            }
        }
    }
}
